
C     **************************************************
C     *  amine_nucl                                     *
C     **************************************************

C     WRITTEN BY Jan and Ben, October 2014 and IMPROVED BY Tinja, 2015/2016

C     This subroutine calculates the dimethylamine-sulfuric acid nucleation rate
C     based on a lookup table generated by the Atmospheric Cluster Dynamics Code (ACDC)

      SUBROUTINE amine_nucl(tempi,csi,cnai,dma_i,fn,rnuc)

      IMPLICIT NONE
 
      include 'sizecode.COM'

C-----INPUTS------------------------------------------------------------

      real tempi                            ! temperature of air [K]
      double precision csi                  ! condensation sink [s-1]
      double precision cnai                 ! concentration of gas phase sulfuric acid [molec cm-3]
      double precision dma_i                ! concentration of dimethyl amine [ppt]

C-----OUTPUTS-----------------------------------------------------------

      double precision fn                   ! nucleation rate [cm-3 s-1]
      double precision rnuc                 ! critical cluster radius [nm]
c      double precision tonset

C-----INCLUDE FILES-----------------------------------------------------

C-----ARGUMENT DECLARATIONS---------------------------------------------

C-----VARIABLE DECLARATIONS---------------------------------------------

      double precision fnl                  ! natural log of nucleation rate
      double precision tmp                  ! temperature of air [K]
      double precision cs                   ! condensation sink [s-1]
      double precision cna                  ! concentration of gas phase sulfuric acid [molec cm-3]
      double precision dma                  ! concentration of gas phase dimethyl amine [ppt]
c
      integer ii                 ! counter
      double precision    ii1, ii2, ii3, ii4
      double precision    ic1, ic2, ic3, ic4
      integer itemp, ics, icna, idma
      integer itemp1,ics1,icna1,idma1


C
      tmp  = dble(tempi)  !K
      cs   = csi    !s-1
      cna  = cnai   !molec cm-3
      dma  = dma_i  !molec cm-3

      !check if gas concentration too low, no NPF
      if (cna.lt.minval(amine_nuc_tbl_H2SO4) .or. dma.lt.minval(amine_nuc_tbl_DMA)) then
         fn = 0.d0 
         rnuc = 0.d0
         return
      end if
       
      !Limit All Values to Upper Bound on Lookup Table
      tmp = max(min(tmp,0.999d0*maxval(amine_nuc_tbl_TEMP)),1.001d0*minval(amine_nuc_tbl_TEMP))
      cs   = max(min(cs,0.999d0*maxval(amine_nuc_tbl_CS)),1.001d0*minval(amine_nuc_tbl_CS))
      cna  = max(min(cna,0.999d0*maxval(amine_nuc_tbl_H2SO4)),1.001d0*minval(amine_nuc_tbl_H2SO4))
      dma  = max(min(dma,0.999d0*maxval(amine_nuc_tbl_DMA)),1.001d0*minval(amine_nuc_tbl_DMA))

      !Locate the lower-bound indices of all the 
      !independent variables
      call locate(amine_nuc_tbl_TEMP,  amine_nuc_nTEMP, tmp, itemp)
      call locate(amine_nuc_tbl_CS,    amine_nuc_nCS, cs, ics)
      call locate(amine_nuc_tbl_H2SO4, amine_nuc_nH2SO4, cna, icna)
      call locate(amine_nuc_tbl_DMA,   amine_nuc_nDMA, dma, idma)

      !Define Nearest Neighbors for Each Index
      itemp1 = itemp + 1
      ics1   = ics   + 1
      icna1  = icna  + 1
      idma1  = idma  + 1

      !Use Multilinear Interpolation even though it is a rather coarse,
      !inaccurate method
      if (size(amine_nuc_tbl_TEMP) .gt. 1) then
         ii1  =  (tmp - amine_nuc_tbl_TEMP(itemp)) / 
     &        (amine_nuc_tbl_TEMP(itemp1) - amine_nuc_tbl_TEMP(itemp) )
      else
         ii1 = 0.d0
         itemp1=1
      end if
      if (size(amine_nuc_tbl_CS) .gt. 1) then
         ii2  =  (log10(cs) - log10(amine_nuc_tbl_CS(ics))) / 
     &        (log10(amine_nuc_tbl_CS(ics1)) - log10(amine_nuc_tbl_CS(ics)) )
      else
         ii2 = 0.d0
         ics1=1
      end if
      if (size(amine_nuc_tbl_H2SO4) .gt. 1) then
         ii3  =  (log10(cna) - log10(amine_nuc_tbl_H2SO4(icna))) / 
     &        (log10(amine_nuc_tbl_H2SO4(icna1)) - log10(amine_nuc_tbl_H2SO4(icna)) )
      else
         ii3 = 0.d0
         icna1=1
      end if
      if (size(amine_nuc_tbl_DMA) .gt. 1) then
         ii4  =  (log10(dma) - log10(amine_nuc_tbl_DMA(idma))) / 
     &        (log10(amine_nuc_tbl_DMA(idma1)) - log10(amine_nuc_tbl_DMA(idma)) )
      else
         ii4 = 0.d0
         idma1=1
      end if
      
      !Store the complements of these factors
      ic1  = 1.d0 - ii1
      ic2  = 1.d0 - ii2
      ic3  = 1.d0 - ii3
      ic4  = 1.d0 - ii4

      !Combine Contributions in all four dimensions to yield
      !Nucleation Rate [particles cm-3 s-1]
      fn = ic1*ic2*ic3*ic4*log10(amine_nuc_tbl_J(itemp, ics, icna, idma)) +
     &     ii1*ic2*ic3*ic4*log10(amine_nuc_tbl_J(itemp1,ics, icna, idma)) +
     &     ic1*ii2*ic3*ic4*log10(amine_nuc_tbl_J(itemp, ics1,icna, idma)) +
     &     ii1*ii2*ic3*ic4*log10(amine_nuc_tbl_J(itemp1,ics1,icna, idma)) +
     &     ic1*ic2*ii3*ic4*log10(amine_nuc_tbl_J(itemp, ics, icna1,idma)) +
     &     ii1*ic2*ii3*ic4*log10(amine_nuc_tbl_J(itemp1,ics, icna1,idma)) +
     &     ic1*ii2*ii3*ic4*log10(amine_nuc_tbl_J(itemp, ics1,icna1,idma)) +
     &     ii1*ii2*ii3*ic4*log10(amine_nuc_tbl_J(itemp1,ics1,icna1,idma)) +
     &     ic1*ic2*ic3*ii4*log10(amine_nuc_tbl_J(itemp, ics, icna, idma1)) +
     &     ii1*ic2*ic3*ii4*log10(amine_nuc_tbl_J(itemp1,ics, icna, idma1)) +
     &     ic1*ii2*ic3*ii4*log10(amine_nuc_tbl_J(itemp, ics1,icna, idma1)) +
     &     ii1*ii2*ic3*ii4*log10(amine_nuc_tbl_J(itemp1,ics1,icna, idma1)) +
     &     ic1*ic2*ii3*ii4*log10(amine_nuc_tbl_J(itemp, ics, icna1,idma1)) +
     &     ii1*ic2*ii3*ii4*log10(amine_nuc_tbl_J(itemp1,ics, icna1,idma1)) +
     &     ic1*ii2*ii3*ii4*log10(amine_nuc_tbl_J(itemp, ics1,icna1,idma1)) +
     &     ii1*ii2*ii3*ii4*log10(amine_nuc_tbl_J(itemp1,ics1,icna1,idma1))
      
      fn=10**fn
      ! The biggest cluster in ACDC simulation (and to which the J corresponds to) 
      ! had a mobility diameter of about 1.4 nm -> set rnuc to 0.7 nm 
      
      rnuc = 0.7d0
      return

      end subroutine

!=============================================================
!
      subroutine read_amine_nuc_table
c
c
c     read_amine_nuc_table opens the lookup table for amine-sulfuric
c     acid nucleation and reads in the table values
c
c     Written: Ben Murphy and Jan Julin 10/17/14
c
c     Input arguments: 
c        none 
c 
c     Output arguments: 
c        All captured variables go to common block in sizecode.COM
c        amine_nuc_tbl_H2SO4 - sulfuric acid conc. [molec cm-3]
c        amine_nuc_tbl_DMA   - dimethyl amine conc. [moelc cm-3??]
c                                  check this!! --------^
c        amine_nuc_tbl_CS    - condensaiton sink [s-1]
c        amine_nuc_tbl_TEMP  - temperature [K]
c        amine_nuc_tbl_J     - Nucleation Rate [Particles cm-3 s-1]
c            
c     Called by:
c        READCHM
c
      include 'sizecode.COM'
c
      integer iH2SO4, iDMA, iCS, iTEMP
      character*99 fname

      fname='DMAN/cond_nuc_PSSA/ACDC_H2SO4_DMA_05Feb2014.txt'
      open(unit=98,file=fname)
      
      !First read header and toss it
      read (98, *)

      !Now Start Reading in the Table
      do iTEMP = 1,amine_nuc_nTEMP
        do iCS = 1,amine_nuc_nCS
          do iH2SO4 = 1,amine_nuc_nH2SO4
            do iDMA = 1,amine_nuc_nDMA
	      read (98,*) amine_nuc_tbl_H2SO4(iH2SO4), amine_nuc_tbl_DMA(iDMA),
     &                    amine_nuc_tbl_TEMP(iTEMP), 
     &                    amine_nuc_tbl_CS(iCS),
     &                    amine_nuc_tbl_J(iTEMP, iCS, iH2SO4, iDMA)
            enddo
          enddo
        enddo
      enddo

      close(98)

      return

      end subroutine

c$$$c========================================================
c$$$c
c$$$      SUBROUTINE locate(xx,n,x,j)
c$$$c     Lookup the nearest index (j) in the array xx to the
c$$$c     value, x, where xx is of length n. x will be
c$$$c     between xx(j) and xx(j+1).
c$$$c
c$$$c========================================================
c$$$      IMPLICIT NONE
c$$$
c$$$      INTEGER j,n
c$$$      DOUBLE PRECISION x,xx(n)
c$$$      INTEGER jl,jm,ju
c$$$      jl=0
c$$$      ju=n+1
c$$$10    if(ju-jl.gt.1)then
c$$$        jm=(ju+jl)/2
c$$$        if((xx(n).ge.xx(1)).eqv.(x.ge.xx(jm)))then
c$$$          jl=jm
c$$$        else
c$$$          ju=jm
c$$$        endif
c$$$      goto 10
c$$$      endif
c$$$      if(x.eq.xx(1))then
c$$$        j=1
c$$$      else if(x.eq.xx(n))then
c$$$        j=n-1
c$$$      else
c$$$        j=jl
c$$$      endif
c$$$      return
c$$$      END 
