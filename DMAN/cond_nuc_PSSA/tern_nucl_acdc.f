
C     **************************************************
C     *  tern_nucl_acdc                                     *
C     **************************************************

C     WRITTEN BY Jan and Ben, December 2014 and IMPROVED BY Tinja, November 2015

C     This subroutine calculates the dimethylamine-sulfuric acid nucleation rate
C     based on a lookup table generated by the Atmospheric Cluster Dynamics Code (ACDC)

      SUBROUTINE tern_nucl_acdc(tempi,rhi,csi,cnai,nh3_i,fn,rnuc)

      IMPLICIT NONE
 
      include 'sizecode.COM'

C-----INPUTS------------------------------------------------------------

      real tempi                            ! temperature of air [K]
      real rhi                  ! relative humidity (as a fraction)
      double precision csi                  ! condensation sink [s-1]
      double precision cnai                 ! concentration of gas phase sulfuric acid [molec cm-3]
      double precision nh3_i                ! concentration of ammonia [molec cm-3]      

C-----OUTPUTS-----------------------------------------------------------

      double precision fn                   ! nucleation rate [cm-3 s-1]
      double precision rnuc                 ! critical cluster radius [nm]

C-----INCLUDE FILES-----------------------------------------------------

C-----ARGUMENT DECLARATIONS---------------------------------------------

C-----VARIABLE DECLARATIONS---------------------------------------------

      double precision fnl                  ! natural log of nucleation rate
      double precision tmp                  ! temperature of air [K]
      double precision relh                 ! relative humidity (as a fraction)
            ! we name this relh because rh defined in sizecode.COM and do not want to change it accidentally
      double precision cs                   ! condensation sink [s-1]
      double precision cna                  ! concentration of gas phase sulfuric acid [molec cm-3]
      double precision nh3                  ! concentration of gas phase ammonia [molec cm-3]      
c
      integer ii                 ! counter
      double precision    ii1, ii2, ii3, ii4, ii5
      double precision    ic1, ic2, ic3, ic4, ic5
      integer itemp, irh, ics, icna, inh3
      integer itemp1,irh1, ics1,icna1,inh31


C
      tmp  = dble(tempi)  !K
      relh   = dble(rhi)    !(0-1)
      cs   = csi    !s-1
      cna  = cnai   !molec cm-3
      nh3  = nh3_i  !molec cm-3

      !check if gas concentration too low, no NPF
      if (cna.lt.minval(tern_nuc_tbl_H2SO4) .or. nh3.lt.minval(tern_nuc_tbl_NH3)) then
         fn = 0.d0 
         rnuc = 0.d0
         return
      end if
 
      !Limit all values to be within the boundaries of the table
      tmp  = max(min(tmp,0.999d0*maxval(tern_nuc_tbl_TEMP)),1.001d0*minval(tern_nuc_tbl_TEMP))
      relh = max(min(relh,0.999d0*maxval(tern_nuc_tbl_RH)),1.001d0*minval(tern_nuc_tbl_RH))
      cs   = max(min(cs,0.999d0*maxval(tern_nuc_tbl_CS)),1.001d0*minval(tern_nuc_tbl_CS))
      cna  = max(min(cna,0.999d0*maxval(tern_nuc_tbl_H2SO4)),1.001d0*minval(tern_nuc_tbl_H2SO4))
      nh3  = max(min(nh3,0.999d0*maxval(tern_nuc_tbl_NH3)),1.001d0*minval(tern_nuc_tbl_NH3))

      !Locate the lower-bound indices of all the 
      !independent variables
      call locate(tern_nuc_tbl_TEMP,  tern_nuc_nTEMP, tmp, itemp)
      call locate(tern_nuc_tbl_RH,    tern_nuc_nRH, relh, irh)
      call locate(tern_nuc_tbl_CS,    tern_nuc_nCS, cs, ics)
      call locate(tern_nuc_tbl_H2SO4, tern_nuc_nH2SO4, cna, icna)
      call locate(tern_nuc_tbl_NH3,   tern_nuc_nNH3, nh3, inh3)

      !Define Nearest Neighbors for Each Index
      itemp1 = itemp + 1
      irh1   = irh   + 1
      ics1   = ics   + 1
      icna1  = icna  + 1
      inh31  = inh3  + 1

      !Use Multilinear Interpolation even though it is a rather coarse,
      !inaccurate method
      if (size(tern_nuc_tbl_TEMP) .gt. 1) then
          ii1  =  (tmp - tern_nuc_tbl_TEMP(itemp)) / 
     &            (tern_nuc_tbl_TEMP(itemp1) - tern_nuc_tbl_TEMP(itemp) )
      else
          ii1 = 0.d0
          itemp1=1
      end if
      if (size(tern_nuc_tbl_RH) .gt. 1) then
          ii2  =  (relh - tern_nuc_tbl_RH(irh)) /
     &            (tern_nuc_tbl_RH(irh1) - tern_nuc_tbl_RH(irh))
      else
          ii2 = 0.d0
          irh1=1
      end if
      if (size(tern_nuc_tbl_CS) .gt. 1) then
          ii3  =  (log10(cs) - log10(tern_nuc_tbl_CS(ics))) / 
     &            (log10(tern_nuc_tbl_CS(ics1)) - log10(tern_nuc_tbl_CS(ics)) )
      else
          ii3 = 0.d0
          ics1=1
      end if
      if (size(tern_nuc_tbl_H2SO4) .gt. 1) then
          ii4  =  (log10(cna) - log10(tern_nuc_tbl_H2SO4(icna))) / 
     &            (log10(tern_nuc_tbl_H2SO4(icna1)) - log10(tern_nuc_tbl_H2SO4(icna)) )
      else
          ii4 = 0.d0
          icna1=1
      end if
      if (size(tern_nuc_tbl_NH3) .gt. 1) then
          ii5  =  (log10(nh3) - log10(tern_nuc_tbl_NH3(inh3))) / 
     &            (log10(tern_nuc_tbl_NH3(inh31)) - log10(tern_nuc_tbl_NH3(inh3)) )
      else
          ii5 = 0.d0
          inh31=1
      end if

      !Store the complements of these factors
      ic1  = 1. - ii1
      ic2  = 1. - ii2
      ic3  = 1. - ii3
      ic4  = 1. - ii4
      ic5  = 1. - ii5

      !Combine Contributions in all five dimensions to yield
      !Nucleation Rate [particles cm-3 s-1]
      fn = ic1*ic2*ic3*ic4*ic5*log10(tern_nuc_tbl_J(itemp, irh, ics, icna, inh3)) +
     &     ii1*ic2*ic3*ic4*ic5*log10(tern_nuc_tbl_J(itemp1, irh, ics, icna, inh3)) +
     &     ic1*ii2*ic3*ic4*ic5*log10(tern_nuc_tbl_J(itemp, irh1, ics, icna, inh3)) +
     &     ii1*ii2*ic3*ic4*ic5*log10(tern_nuc_tbl_J(itemp1, irh1, ics, icna, inh3)) +
     &     ic1*ic2*ii3*ic4*ic5*log10(tern_nuc_tbl_J(itemp, irh, ics1, icna, inh3)) +
     &     ii1*ic2*ii3*ic4*ic5*log10(tern_nuc_tbl_J(itemp1, irh, ics1, icna, inh3)) +
     &     ic1*ii2*ii3*ic4*ic5*log10(tern_nuc_tbl_J(itemp, irh1, ics1, icna, inh3)) +
     &     ii1*ii2*ii3*ic4*ic5*log10(tern_nuc_tbl_J(itemp1, irh1, ics1, icna, inh3)) +
     &     ic1*ic2*ic3*ii4*ic5*log10(tern_nuc_tbl_J(itemp, irh, ics, icna1, inh3)) +
     &     ii1*ic2*ic3*ii4*ic5*log10(tern_nuc_tbl_J(itemp1, irh, ics, icna1, inh3)) +
     &     ic1*ii2*ic3*ii4*ic5*log10(tern_nuc_tbl_J(itemp, irh1, ics, icna1, inh3)) +
     &     ii1*ii2*ic3*ii4*ic5*log10(tern_nuc_tbl_J(itemp1, irh1, ics, icna1, inh3)) +
     &     ic1*ic2*ii3*ii4*ic5*log10(tern_nuc_tbl_J(itemp, irh, ics1, icna1, inh3)) +
     &     ii1*ic2*ii3*ii4*ic5*log10(tern_nuc_tbl_J(itemp1, irh, ics1, icna1, inh3)) +
     &     ic1*ii2*ii3*ii4*ic5*log10(tern_nuc_tbl_J(itemp, irh1, ics1, icna1, inh3)) +
     &     ii1*ii2*ii3*ii4*ic5*log10(tern_nuc_tbl_J(itemp1, irh1, ics1, icna1, inh3)) +
     &     ic1*ic2*ic3*ic4*ii5*log10(tern_nuc_tbl_J(itemp, irh, ics, icna, inh31)) +
     &     ii1*ic2*ic3*ic4*ii5*log10(tern_nuc_tbl_J(itemp1, irh, ics, icna, inh31)) +
     &     ic1*ii2*ic3*ic4*ii5*log10(tern_nuc_tbl_J(itemp, irh1, ics, icna, inh31)) +
     &     ii1*ii2*ic3*ic4*ii5*log10(tern_nuc_tbl_J(itemp1, irh1, ics, icna, inh31)) +
     &     ic1*ic2*ii3*ic4*ii5*log10(tern_nuc_tbl_J(itemp, irh, ics1, icna, inh31)) +
     &     ii1*ic2*ii3*ic4*ii5*log10(tern_nuc_tbl_J(itemp1, irh, ics1, icna, inh31)) +
     &     ic1*ii2*ii3*ic4*ii5*log10(tern_nuc_tbl_J(itemp, irh1, ics1, icna, inh31)) +
     &     ii1*ii2*ii3*ic4*ii5*log10(tern_nuc_tbl_J(itemp1, irh1, ics1, icna, inh31)) +
     &     ic1*ic2*ic3*ii4*ii5*log10(tern_nuc_tbl_J(itemp, irh, ics, icna1, inh31)) +
     &     ii1*ic2*ic3*ii4*ii5*log10(tern_nuc_tbl_J(itemp1, irh, ics, icna1, inh31)) +
     &     ic1*ii2*ic3*ii4*ii5*log10(tern_nuc_tbl_J(itemp, irh1, ics, icna1, inh31)) +
     &     ii1*ii2*ic3*ii4*ii5*log10(tern_nuc_tbl_J(itemp1, irh1, ics, icna1, inh31)) +
     &     ic1*ic2*ii3*ii4*ii5*log10(tern_nuc_tbl_J(itemp, irh, ics1, icna1, inh31)) +
     &     ii1*ic2*ii3*ii4*ii5*log10(tern_nuc_tbl_J(itemp1, irh, ics1, icna1, inh31)) +
     &     ic1*ii2*ii3*ii4*ii5*log10(tern_nuc_tbl_J(itemp, irh1, ics1, icna1, inh31)) +
     &     ii1*ii2*ii3*ii4*ii5*log10(tern_nuc_tbl_J(itemp1, irh1, ics1, icna1, inh31))
      
      ! The biggest cluster in ACDC simulation (and to which the J corresponds to) 
      ! had a mobility diameter of about 1.2 nm -> set rnuc to 0.6 nm
 
      rnuc = 0.6d0
      return

      end subroutine

!=============================================================
!
      subroutine read_tern_nuc_table

      IMPLICIT NONE
c
c
c     read_tern_nuc_table opens the lookup table for ammonia-sulfuric
c     acid-water nucleation and reads in the table values
c
c     Written: Ben Murphy and Jan Julin 12/15/14
c
c     Input arguments: 
c        none 
c 
c     Output arguments: 
c        All captured variables go to common block in sizecode.COM
c        tern_nuc_tbl_H2SO4 - sulfuric acid conc. [molec cm-3]
c        tern_nuc_tbl_NH3   - ammonia conc. [moelc cm-3]
c        tern_nuc_tbl_RH    - RH [%]                          
c        tern_nuc_tbl_CS    - condensaiton sink [s-1]
c        tern_nuc_tbl_TEMP  - temperature [K]
c        tern_nuc_tbl_J     - Nucleation Rate [Particles cm-3 s-1]
c            
c     Called by:
c        READCHM
c
      include 'sizecode.COM'
c
      integer iH2SO4, iNH3, iCS, iTEMP, iRH
      character*150 fname
      
c      True ACDC lookup table with the QC input
      fname='DMAN/cond_nuc_PSSA/ACDC_H2SO4_NH3_RH_2014-12-04.txt'
      open(unit=98,file=fname)

      !First read header and toss it
      read (98, *)

      !Now Start Reading in the Table
      do iTEMP = 1,tern_nuc_nTEMP
         do iRH = 1,tern_nuc_nRH
            do iCS = 1,tern_nuc_nCS
               do iH2SO4 = 1,tern_nuc_nH2SO4
                  do iNH3 = 1,tern_nuc_nNH3
                     read (98,*) tern_nuc_tbl_H2SO4(iH2SO4), 
     &                    tern_nuc_tbl_NH3(iNH3),
     &                    tern_nuc_tbl_TEMP(iTEMP),tern_nuc_tbl_RH(iRH), 
     &                    tern_nuc_tbl_CS(iCS),
     &                    tern_nuc_tbl_J(iTEMP, iRH, iCS, iH2SO4, iNH3)
                  enddo
               enddo
            enddo
         enddo
      enddo

      close(98)
      
c     Lookup Table gives RH as %, PMCAMx-UF treats RH as a fraction (0-1)
C     Switch RH here to be consistent with rest of PMCAMx-UF
      do iRH=1,tern_nuc_nRH 
         tern_nuc_tbl_RH(iRH)=0.01d0*tern_nuc_tbl_RH(iRH)
      end do

      return

      end subroutine

c========================================================
c
      SUBROUTINE locate(xx,n,x,j)
c     Lookup the nearest index (j) in the array xx to the
c     value, x, where xx is of length n. x will be
c     between xx(j) and xx(j+1).
c
c========================================================
      IMPLICIT NONE

      INTEGER j,n
      DOUBLE PRECISION x,xx(n)
      INTEGER jl,jm,ju
      jl=0
      ju=n+1
10    if(ju-jl.gt.1)then
        jm=(ju+jl)/2
        if((xx(n).ge.xx(1)).eqv.(x.ge.xx(jm)))then
          jl=jm
        else
          ju=jm
        endif
      goto 10
      endif
      if(x.eq.xx(1))then
        j=1
      else if(x.eq.xx(n))then
        j=n-1
      else
        j=jl
      endif
      return
      END 
